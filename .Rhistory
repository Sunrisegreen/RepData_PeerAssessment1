quantile(mtcars$mpg)
cutpoints=quantiles(mtars$mpg)
cutpoints=quantile(mtars$mpg)
cutpoints=quantile(mtcars$mpg)
cutpoints
class(cutpoints)
a=cut(mtcars$mpg,cutpoints)
a
cutpoints=quantile(mtcars$mpg,seq(0,1,length=4))
a=cut(mtcars$mpg,cutpoints)
a
set.seed(1234)
x=rnorm(12,mean=rep(1:3,each=4),sd=0.2)
y=rnorm(12,mean=rep(c(1,2,1),each=4),sd=0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x,y,labels=as.character=(1:12))
text(x,y,labels=as.character=(1:12))
text(x,y,labels=as.character=(1:12))
set.seed(1234)
x=rnorm(12,mean=rep(1:3,each=4),sd=0.2)
y=rnorm(12,mean=rep(c(1,2,1),each=4),sd=0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x,y,labels=as.character=(1:12))
library("ggplot2", lib.loc="F:/R-3.1.1/library")
head(mpg)
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,geom="point")
qplot(displ,hwy,data=mpg,geom="point")
qplot(displ,hwy,data=mpg,geom="smooth")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"))
qplot(hwy, data=mpg)
qplot(hwy, data=mpg,binwidth=5)
qplot(hwy, data=mpg)
qplot(hwy, data=mpg,binwidth=10)
str(maacs)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,facets=~.drv)
qplot(displ,hwy,data=mpg,facets=~.drv)
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(displ,hwy,data=mpg,facets=.~drv,color=drv)
ggplot(mpg,aes(displ,hwy))
g=ggplot(mpg,aes(displ,hwy))
summary(g)
g+geom_point()
ggplot(mpg,aes(displ,hwy))+geom_point()
ggplot(mpg,aes(displ,hwy))+geom_point()
ggplot(mpg,aes(displ,hwy))+geom_point()+geom_smooth()
ggplot(mpg,aes(displ,hwy))+geom_point()+geom_smooth()+facet_grid(.~drv)
ggplot(mpg,aes(displ,hwy))+geom_point(color="pink")
ggplot(mpg,aes(displ,hwy))+geom_point(color="purple")
ggplot(mpg,aes(displ,hwy))+geom_point(color="purple",size=2)
ggplot(mpg,aes(displ,hwy))+geom_point(color="purple",size=4)
ggplot(mpg,aes(displ,hwy))+geom_point(color=aes(drv),size=4)
ggplot(mpg,aes(displ,hwy))+geom_point(aes(color=drv),size=4)
ggplot(mpg,aes(displ,hwy))+geom_point(color=drv,size=4)
ggplot(mpg,aes(displ,hwy))+geom_point(aes(color=drv),size=3)
ggplot(mpg,aes(displ,hwy))+geom_point(aes(color=drv),size=3) + labs(title="MY GGPLOT 1")
ggplot(mpg,aes(displ,hwy))+geom_point(aes(color=drv),size=3) + labs(title="MY GGPLOT 1") + labs(x=expression(disp[3]))
ggplot(mpg,aes(displ,hwy))+geom_point(aes(color=drv),size=3) + labs(title="MY GGPLOT 1") + labs(y="HWY VALUE",x=expression(disp[3]))
ggplot(mpg,aes(displ,hwy))
ggplot(mpg,aes(displ,hwy))+geom_smooth(linetype=3)
ggplot(mpg,aes(displ,hwy))+geom_smooth(linetype=3,se=FALSE)
str(mpg)
qplot(displ,hwy,data=mpg,facets=class~drv,color=drv)
g=ggplot(mpg,aes(displ,hwy))
summary(g)
g+geom_point()
ggplot(mpg,aes(displ,hwy))+geom_point(aes(color=drv),size=3) + labs(title="MY GGPLOT 1") + labs(y="HWY VALUE",x=expression(disp[3]))
ggplot(mpg,aes(displ,hwy))+geom_smooth(linetype=3,se=FALSE)
qplot(displ,hwy,data=mpg,facets=class~drv)
g+geom_point()
g+facet_grid(class~drv)
g+geom_point()
g+geom_point()+facet_grid(class~drv)
g+geom_point()+facet_grid(class~drv)
g+geom_point()+facet_wrap(class~drv,nrow=3,ncol=3)
g+geom_point()+facet_grid(class~drv)
?lm
sample(1:12)
sample(1:12,3)
sample(1:12,3)
dataframe <- data.frame(x=x,y=y)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
heatmap(dataMatrix)
dataframe <- data.frame(x=x,y=y)
set.seed(143)
dataMatrix <- as.matrix(dataframe)[sample(1:12),]
heatmap(dataMatrix)
dataMatrix
as.matrix(dataframe)[sample(1:12),]
dataframe <- data.frame(x=x,y=y)
x <- rnorm(12,mean=rep(1:3,each=4),sd=0.2)
y <- rnorm(12,mean=rep(c(1,2,1),each=4),sd=0.2)
dataframe <- data.frame(x=x,y=y)
set.seed(143)
dataMatrix <- as.matrix(dataframe)[sample(1:12),]
heatmap(dataMatrix)
x
rep(c(1,2,1))
rnorm(12)
r=rnorm(12)
sd(r)
mean=rep(c(1,2,1),each=4)
mean
mean(mean)
dataMatrix
x <- rnorm(12,mean=rep(1:3,each=4),sd=0.2)
y <- rnorm(12,mean=rep(c(1,2,1),each=4),sd=0.2)
dataframe <- data.frame(x=x,y=y)
dataframe
h = dist(dataframe)
h
hclust(h)
plot(hclust(h))
x <- rnorm(12,mean=rep(1:3,each=4),sd=0.2)
y <- rnorm(12,mean=rep(c(1,2,1),each=4),sd=0.2)
dataframe <- data.frame(x=x,y=y)
dataframe
plot(dataframe$x)
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip1 <- rbinom(1, size = 1, prob = 0.5)
coinFlip2 <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip1) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 5), each = 5)
}
if (coinFlip2) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 5), 5)
}
}
?plot
?image
?t
datamatrix <- matrix(rnorm(6),nrow=2)
datamatrix
set.seed(10)
datamatrix <- matrix(rnorm(6),nrow=2)
datamatrix
t(datamatrix)
t(datamatrix)[,nrow(datamatrix):1]
nrow(datamatrix)
datamatrix <- matrix(c(1,2,3,4,5,6),2,3)
datamatrix
t(datamatrix)
datamatrix
t(datamatrix)[,nrow(datamatrix):1]
heatmap(datamatrix)
datamatrix
datamatrix <- matrix(c(1,2,3,4,5,6),2,3)
rep(c(30),3)
datamatrix[1,] <- datamatrix[1,] + rep(c(30),3)
datamatrix
dist(datamatrix)
hclust(dist(datamatrix))
h =hclust(dist(datamatrix))
str(h)
h
datamatrix
plot(rowmeans(datamatrix))
plot(rowMeans(datamatrix))
plot(rowMeans(datamatrix),2:1)
plot(rowMeans(datamatrix),2:2)
s = svd(datamatrix)
s
datamatrix
pca(scale)
prcomp(datamatrix,scale=TRUE)
s = svd(datamatrix,scale=TRUE)
?svd
datamatrix
s=svd(datamatrix)
s$u %*% D %*% t(s$v)
s$u %*% D %*% t(s$v)
s=svd(datamatrix)
o = s$u %*% D %*% t(s$v)
D <- diag(s$d)
o = s$u %*% D %*% t(s$v)
o
?diag
diag(datamatrix)
s$d
s
diag(d)
diag(s$d)
o = s$u %*% s$d %*% t(s$v)
datamatrix
t(datamatrix)
?prcomp
prcomp(USArrests, scale = TRUE)
prcomp(~ Murder + Assault + Rape, data = USArrests, scale = TRUE)
plot(prcomp(USArrests))
biplot(prcomp(USArrests, scale = TRUE))
datamatrix <- matrix(c(1,2,3,4,5,6),2,3)
t(datamatrix)[,nrow(datamatrix):1]
datamatrix[1,] <- datamatrix[1,] + rep(c(30),3)
plot(rowMeans(datamatrix))
s=svd(datamatrix)
D <- diag(s$d)
s$u %*% D %*% t(s$v)
datamatrix <- matrix(c(1,2,3,4,5,6),2,3)
s=svd(datamatrix)
s
plot(s$u[,1])
plot(s$v[,1])
h = hclust(dist(datamatrix))
h$order
h
?objects
objects(h)
list(h)
h[2]
datamatrix
datamatrix[c(2,1),]
datamatrix[2,]
datamatrix <- matrix(rnorm(12),nrow=3)
set.seed(10)
datamatrix <- matrix(rnorm(12),nrow=3)
datamatrix
h = hclust(dist(datamatrix))
h
h$order
o =datamatrix[h$order,]
o
dist(datamatrix)
set.seed(10)
datamatrix <- matrix(rnorm(25),nrow=5)
dist(datamatrix)
hclust(dist(datamatrix))
h=hclust(dist(datamatrix))
h$order
class(h)
typeof(h)
h$1
h[[1]]
h[[2]]
h[[3]]
h[[4]]
h[[5]]
h[[6]]
h[[7]]
h[[8]]
h[[0]]
str(h)
datamatrix[h$order,]
datamatrix
o=datamatrix[h$order,]
s=svd(o)
s
plot(s$u)
plot(s$v)
plot(s$u[,1],5:1)
plot(rowmeans(o),5:1)
plot(rowMeans(o),5:1)
plot(colMeans(o),5:1)
s
o
?variance
??variance
as.matrix(s)
?svd
datamatrix
diag(datamatrix)
svd(datamatrix)
var(datamatrix[1,])
var(datamatrix[2,])
var(datamatrix[3,])
var(datamatrix[4,])
var(datamatrix[5,])
0.3821084+1.224797+ 0.2365673+2.036065+0.6340475
?abline
s =svd(datamatrix)
var(s$u[,1])
s$d
var(s$v[,1])
var(s$v[,1]^2)
set.seed(10)
datamatrix <- matrix(rnorm(25),nrow=5)
datamatrix
svd(datamatrix)
s=svd(datamatrix)
var(s$v[,1])
datamatrix
t(datamatrix[,nrow(datamatrix):1])
set.seed(10)
datamatrix <- matrix(rnorm(25),nrow=5)
datamatrix
s=svd(scale(datamatrix))
D <- diag(s$d)
result <- s$u %*% D %*% t(s$v)
result
set.seed(10)
datamatrix <- matrix(rnorm(25),nrow=5)
s=svd(datamatrix)
D <- diag(s$d)
result <- s$u %*% D %*% t(s$v)
result
eigenvectors <- datamatrix.cor$vectors
eigenvectors <- datamatrix.(eigen(cor(datamatrix))$vectors
eigenvectors <- datamatrix.(eigen(cor(datamatrix)))$vectors
eigenvectors <- datamatrix.(eigen(cor(datamatrix)))$vectors
set.seed(10)
datamatrix <- matrix(rnorm(25),nrow=5)
eigenvectors <- datamatrix.(eigen(cor(datamatrix)))$vectors
e.cor <- eigen(cor(datamatrix))
eigenvectors <- e.cor$vectors
d2 <- scale(datamatrix)
scores <- d2 %*% eigenvectors
total.var<-sum(diag(cov(d2))) #Calculate total variance in scaled data
prop.var<-rep(NA,ncol(datamatrix));cum.var<-rep(NA,ncol(datamatrix))
for(i in 1:ncol(datamatrix)){prop.var[i]<-var(scores[,i])/total.var}
for(i in 1:ncol(datamatrix)){cum.var[i]<-sum(prop.var[1,i])
}
prop.var<-rep(NA,ncol(datamatrix));
prop.var
for(i in 1:ncol(datamatrix)){prop.var[i]<-var(scores[,i])/total.var}
for(i in 1:ncol(datamatrix)){cum.var[i]<-sum(prop.var[i])}
prop.var
D
cum.var
scores
var(scores)
d2 <- datamatrix[sample(1:100,size = 5,replace=FALSE)] <- NA
d2
datamatrix
sample(1:100,size = 5,replace=FALSE)
sample(1:10,size = 5,replace=FALSE)
d2 <- datamatrix[sample(1:10,size = 5,replace=FALSE)]
d2
datamatrix
set.seed(10)
datamatrix <- matrix(rnorm(25),nrow=5)
datamatrix
d2 <- datamatrix[sample(1:10,size = 5,replace=FALSE)]
d2
d2 <- datamatrix[sample(1:10,size = 5,replace=FALSE)] <- NA
d2
datamatrix[sample(1:10,size = 5,replace=FALSE)] <- NA
datamatrix
set.seed(10)
datamatrix <- matrix(rnorm(25),nrow=5)
s=svd(scale(datamatrix))
plot(s$d^2/sum(s$d^2),pch=19)
?scale
image(t(datamatrix))
image(t(datamatrix)[,nrow(datamatrix):1])
datamatrix
image(datamatrix)
?colorRamp
colorRamp(c("red","blue"))
p=colorRamp(c("red","blue"))
p(0)
p(0.45)
p=colorRampPalette(c("red","yellow"))
p(5)
install.packages("RColorBrewer")
cols<- brewer.pal(100,"BuGn")
library("RColorBrewer")
cols<- brewer.pal(100,"BuGn")
cols<- brewer.pal(1:9,"BuGn")
cols<- brewer.pal(9,"BuGn")
cols
cols<- brewer.pal(3,"BuGn")
cols
cols<- brewer.pal(9,"BuGn")
cols
?brewer.pal
display.brewer.pal(3,"BuGn")
display.brewer.pal(9,"BuGn")
display.brewer.pal(5,"BuGn")
cols<- brewer.pal(9,"BuGn")
display(cols)
display.cols
cols
?cov
cor(1:10,2:11)
cov(1:10,2:11)
cov(1:10)
matrix
a = matrix(c(1:10))
a
a = matrix(c(1:10),nrow=5)
a
b = matrix(c(21:31),nrow=5)
b = matrix(c(20:29),nrow=5)
b
cov(a,b)
cor(a,b)
object.size(numeric)
object.size(integer)
object.size("integer")
object.size("numeric")
?size
?object
?numeric
library("ggplot2", lib.loc="F:/R-3.1.1/library")
?data
data("diamonds")
str(diamonds)
diamonds$cut <- as.numeric(diamonds$cut)
diamonds$clarity <- as.numeric(diamonds$clarity)
diamonds$color <- as.numeric(factor(diamonds$color,levels=rev(levels(diamonds$color))))
str(diamonds)
View(head(diamonds,10))
s<-svd(scale(diamonds))
p<-prcomp(diamonds,scale=TRUE)
s
p
par(mfrow=c(1,2))
plot(s$d^2 / sum(s$d^2))
plot(p$sdev^2 / sum(p$sdev^2))
p$sdev^2/sum(p$sdev^2)
sum(p$sdev^2/sum(p$sdev^2)[1:5])
sum(p$sdev^2/sum(p$sdev^2))[1:5])
sum((p$sdev^2/sum(p$sdev^2))[1:5])
str(p)
plot(s$v[,1], pch=19)
plot(p$rotation[,1], pch=19)
head(s$v)
str(diamonds)
library("ggplot2", lib.loc="F:/R-3.1.1/library")
data("diamonds")
str(diamonds)
diamonds$cut <- as.numeric(diamonds$cut)
diamonds$clarity <- as.numeric(diamonds$clarity)
diamonds$color <- as.numeric(factor(diamonds$color,levels=rev(levels(diamonds$color))))
str(diamonds)
p<-prcomp(diamonds,scale=TRUE)
View(p)
p
p$sdev
class(p$sdev)
typeof(p$sdev)
p$sdev[,1]
dim(p$sdev)
?dim
str(p$sdev)
p$sdev^2/sum(p$sdev^2)
class(p$Rotation)
class(p$rotation)
par(mfrow=c(1,2))
str(p$rotation)
p$rotation[,1]
plot(p$rotation[,1], pch=19)
plot(p$rotation[,2, pch=19)
plot(p$rotation[,1], pch=19)
plot(p$rotation[,2], pch=19)
par(mfrow=c(1,2))
plot(p$rotation[,1], pch=19)
plot(p$rotation[,2], pch=19)
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
d = data.frame(x,y)
d
kobj = kmeans(d,centers=3)
names(kobj)
kobj$cluster
kobj$centers
kobj$size
kobj$withinss
plot(d$x,d$y,col=kobj$cluster,pch=19)
kobj = kmeans(d,centers=1)
plot(d$x,d$y,col=kobj$cluster,pch=19)
kobj = kmeans(d,centers=6)
plot(d$x,d$y,col=kobj$cluster,pch=19)
plot(kobj$centers,pch=27)
plot(kobj$centers,pch=7)
plot(d$x,d$y,col=kobj$cluster,pch=19)
points(kobj$centers,pch=3)
plot(d$x,d$y,col=kobj$cluster,pch=19)
points(kobj$centers,pch=3,col=1:6)
plot(d$x,d$y,col=kobj$cluster,pch=19)
points(kobj$centers,pch=3,col=1:6,lwd=7)
plot(d$x,d$y,col=kobj$cluster,pch=19)
points(kobj$centers,pch=3,col=1:6,lwd=5)
plot(d$x,d$y,col=kobj$cluster,pch=19)
points(kobj$centers,pch=3,col=1:6,lwd=3)
plot(d$x,d$y,col=kobj$cluster,pch=19)
points(kobj$centers,pch=3,col=1:6,lwd=2)
d[order(kobj@cluster),]
d[order(kobj$cluster),]
d
a=d[order(kobj$cluster),]
cbind(a,kobj$cluster)
?order
order(kobj$cluster)
order(kobj$cluster,decreasing=T)
kobj$cluster
?kmeans
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
colnames(x) <- c("x", "y")
(cl <- kmeans(x, 2))
plot(x, col = cl$cluster)
points(cl$centers, col = 1:2, pch = 8, cex = 2)
(cl <- kmeans(x, 5, nstart = 25))
plot(x, col = cl$cluster)
points(cl$centers, col = 1:5, pch = 8)
(cl <- kmeans(x, 5, nstart = 75))
plot(x, col = cl$cluster)
points(cl$centers, col = 1:5, pch = 8)
(cl <- kmeans(x, 5, nstart = 1))
plot(x, col = cl$cluster)
points(cl$centers, col = 1:5, pch = 8)
R,version
R.version
setwd("C:/Users/Hp/ReproducibleResearch")
library("knitr")
knit2html("PA1_template.Rmd")
